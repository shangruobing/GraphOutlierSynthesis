import torch
import torch.nn as nn
from torch_geometric.data import Data

from src.common.parse import Arguments

__all__ = ["compute_loss"]


def compute_loss(
        dataset_id: Data,
        dataset_ood: Data,
        synthesis_ood_dataset: Data,
        encoder: nn.Module,
        classifier: nn.Module,
        criterion: nn.BCELoss,
        device: torch.device,
        args: Arguments
):
    """
    Compute the loss for in-distribution and out-of-distribution datasets.
    loss = supervised_learning_loss + energy_regularization_loss + classifier_loss
    Args:
        dataset_id: The in-distribution dataset
        dataset_ood: The out-of-distribution dataset
        synthesis_ood_dataset: The out-of-distribution dataset generated by KNN.
        encoder: The GNN encoder
        classifier: The penultimate embeddings classifier
        criterion: The loss function
        device: The device to run the computation
        args: The command line arguments

    Returns: The value of loss function.

    """
    loss = torch.tensor(data=0, dtype=torch.float, device=device)

    train_id_idx, train_ood_idx = dataset_id.train_mask, dataset_ood.node_idx

    # Get the GNN output for the ID data
    logit_id, penultimate_id = encoder(dataset_id.x, dataset_id.edge_index)

    # Get the GNN output for the OOD data
    logit_ood, penultimate_ood = encoder(dataset_ood.x, dataset_ood.edge_index)

    classifier_ood_list = []
    if args.synthesis_ood:
        # Get the GNN output for the synthesised OOD data
        logit_knn_ood, penultimate_knn_ood = encoder(synthesis_ood_dataset.x, synthesis_ood_dataset.edge_index)
        if args.use_classifier:
            classifier_ood_knn = classifier(
                penultimate_knn_ood,
                synthesis_ood_dataset.x,
                synthesis_ood_dataset.edge_index,
                synthesis_ood_dataset.node_idx
            )
            classifier_ood_list.append(classifier_ood_knn)

    if args.use_classifier:
        # The ID data is fed into the classifier
        classifier_id = classifier(
            penultimate_id,
            dataset_id.x,
            dataset_id.edge_index,
            train_id_idx
        )
        # The OOD data is fed into the classifier
        classifier_ood = classifier(
            penultimate_ood,
            dataset_ood.x,
            dataset_ood.edge_index,
            train_ood_idx
        )
        classifier_ood_list.append(classifier_ood)

        classifier_ood = torch.cat(classifier_ood_list, dim=0)

        classifier_output = torch.cat([classifier_id, classifier_ood])
        classifier_label = torch.cat([
            torch.ones(len(classifier_id), device=device),
            torch.zeros(len(classifier_ood), device=device)
        ])

        classifier_loss = criterion(classifier_output, classifier_label)
        loss = args.delta * classifier_loss

    return loss
